{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Trivia API\\\\starter\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport _ from 'lodash';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getCategories = () => {\n      fetch('/categories', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(res => res.json()).then(({\n        categories\n      }) => {\n        this.setState({\n          categories\n        });\n      }).catch(error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      });\n    };\n\n    this.getQuestions = () => {\n      fetch(\"/questions?page=\".concat(this.state.page), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(res => res.json()).then(({\n        questions,\n        totalQuestions,\n        currentCategory\n      }) => {\n        this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory\n        });\n      }).catch(error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      });\n    };\n\n    this.getByCategory = id => {\n      fetch(\"/categories/\".concat(id, \"/questions\"), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(res => res.json()).then(({\n        questions,\n        totalQuestions,\n        currentCategory\n      }) => {\n        this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory\n        });\n      }).catch(error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      fetch(\"/questions\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          searchTerm: searchTerm\n        })\n      }).then(res => res.json()).then(({\n        questions,\n        totalQuestions,\n        currentCategory\n      }) => {\n        this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory\n        });\n      }).catch(error => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          fetch(\"/questions/\".concat(id), {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8'\n            }\n          }).then(() => {\n            this.getQuestions();\n          }).catch(error => {\n            alert('Unable to load questions. Please try your request again');\n            return;\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.getCategories();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: this.getQuestions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.state.categories.map(({\n      id,\n      type\n    }) => React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"category\",\n      alt: \"category-\".concat(type.toLowerCase()),\n      src: \"\".concat(type.toLowerCase(), \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), type)))), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Questions\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"question-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, !_.isEmpty(this.state.categories) && this.state.questions.map(q => {\n      return React.createElement(Question, {\n        key: q.id,\n        question: q.question,\n        answer: q.answer,\n        category: this.state.categories.find(c => c.id == q.category)['type'],\n        difficulty: q.difficulty,\n        questionAction: this.questionAction(q.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.createPagination()))));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\Trivia API\\starter\\frontend\\src\\components\\QuestionView.js"],"names":["React","Component","Question","Search","_","QuestionView","constructor","getCategories","fetch","method","headers","then","res","json","categories","setState","catch","error","alert","getQuestions","state","page","questions","totalQuestions","currentCategory","getByCategory","id","submitSearch","searchTerm","body","JSON","stringify","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map","type","toLowerCase","isEmpty","q","question","answer","find","c","category","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport _ from 'lodash'\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.getCategories();\n  }\n\n  getCategories =  () => {\n    fetch('/categories',{\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n    }).then((res) => res.json())\n    .then(({categories}) => {\n      this.setState({categories});\n    }).catch((error) => {\n      alert('Unable to load categories. Please try your request again')\n      return;\n    })\n  }\n\n  getQuestions = () => {\n    fetch(`/questions?page=${this.state.page}`,{\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n    }).then((res) => res.json())\n      .then(({questions, totalQuestions, currentCategory}) => {\n        this.setState({\n            questions: questions,\n            totalQuestions: totalQuestions,\n            currentCategory: currentCategory })\n      }).catch((error) => {\n        alert('Unable to load questions. Please try your request again')\n      return;\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    fetch(`/categories/${id}/questions`,{\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n    }).then((res) => res.json())\n    .then(({questions, totalQuestions, currentCategory}) => {\n      this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory })\n    }).catch((error) => {\n        alert('Unable to load questions. Please try your request again')\n      return;\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    fetch(`/questions`,{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({searchTerm: searchTerm}),\n    }).then((res) => res.json())\n    .then(({questions, totalQuestions, currentCategory}) => {\n      this.setState({\n          questions: questions,\n          totalQuestions: totalQuestions,\n          currentCategory: currentCategory })\n    }).catch((error) => {\n        alert('Unable to load questions. Please try your request again')\n      return;\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        fetch(`/questions/${id}`,{\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n          },\n        })\n        .then(() => {\n          this.getQuestions();\n        }).catch((error) => {\n            alert('Unable to load questions. Please try your request again')\n        return;\n      })\n      }\n    }\n  }\n\n  render() {\n\n    return (\n      <>\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={this.getQuestions}>Categories</h2>\n          <ul>\n            {this.state.categories.map(({id, type}) => (\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\n                <img className=\"category\" alt={`category-${type.toLowerCase()}`} src={`${type.toLowerCase()}.svg`}/>\n                {type}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n            <div>\n              <Search submitSearch={this.submitSearch}/>\n            </div>\n            <div class=\"question-container\">\n              {!_.isEmpty(this.state.categories) && this.state.questions.map((q) => {\n            return (\n              <Question\n                key={q.id}\n                question={q.question}\n                answer={q.answer}\n                category={this.state.categories.find((c) => c.id == q.category)['type']} \n                difficulty={q.difficulty}\n                questionAction={this.questionAction(q.id)}\n              />\n            )})}\n            </div>\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n      </>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}